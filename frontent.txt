			


					1. Селектор CSS

Селектор CSS - это шаблон, соответствующий элементам HTML-документа.
 Все элементы, которые только можно видеть на веб-странице, можно оформлять и менять их внешний вид с помощью технологии CSS.

В технологии CSS это можно сделать с помощью селекторов.Селекторы это обращение к элементу либо к группе элементов с целью их стилизации. Сначала идет указание селектора, а за ним, уже в фигурных скобках, следуют стили, которые будут применяться к выбранному с помощью селекторов элементу. По-сути, весь CSS-файл и состоит из таких конструкций, указания селекторов и стилей, которые к ним относятся.

	Селектор по тегу:
HTML:   <h1>Title</h1>				CSS:     h1 {			h1, h2 {
	<h2>Title 2</h2>				  color: red;		 color: blue;
							 }			}
							 h2 {
							  color: green;
							 }
	
	Селектор по классу:
HTML:   <h1 class="heading-1">Title</h1>	CSS:     .heading-1 {		.heading-1, .heading-1 { 
	<h2 class="heading-2">Title 2</h2>		backround-color: red;	 backround-color: green;
							}			 }
							 .heading-2 {
							backround-color: green;
							}
	Селектор по id:
HTML: <h1 id="heading">Title</h1>		CSS:     #heading {
							backround-color: blue;
							}
id отличается от class тем что он может быть на странице только один. Идентификатор должен быть уникальным -  использоваться только для одного элемента в HTML-документе.

	Универсальный селектор:
HTML: <p class="warning">					    CSS: * {	
	<span lang="en-us">Зелёный span</span> в красном параграфе.	 border: 1px solid #000000;
	</p>								 }
	<p id="maincontent" lang="en-gb">				 * [lang^=en] {
	<span class="warning">Красный span</span> в зелёном параграфе.	 color:green;
	</p>					 			 }
									 *.warning {
									 color:red;
									 }
	
	Селекторы по атрибуту: Этот селектор выбирает все элементы, имеющие данный атрибут или атрибут с определённым значением. Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
	[attr] - обозначает элемент с атрибутом по имени attr.
	[attr=value] - обозначает элемент с именем атрибута attr и значением в точности совпадающим с value.
	[attr~=value] - обозначает элемент с именем атрибута attr значением которого является набор слов разделённых 	пробелами, одно из которых в точности равно value
	[attr|value] - обозначает элемент с именем атрибута attr. Его значение при этом может быть или в точности равно 	"value" или может начинаться с "value" со сразу же следующим "-" (U+002D). Это может быть использовано когда язык 	описывается с подходом.
	[attr^=value] - обозначает элемент с именем атрибута attr значение которого начинается с "value"
	[attr$=value] - обозначает элемент с именем атрибута attr чьё значение заканчивается на "value"
	[attr*=value] - обозначает элемент с именем атрибута attr чьё значение содержит по крайней мере одно вхождение 	строки "value" как подстроки.
 Пример: селектор [autoplay] выберет все элементы, у которых есть атрибут autoplay (независимо от его значения). Ещё пример: a[href$=".jpg"] выберет все ссылки, у которых адрес заканчивается на ".jpg". Ещё пример: a[href^="https"] выберет все ссылки, у которых адрес начинается на "https".


	Селекторы по типу элемента - этот базовый селектор выбирает тип элементов, к которым будет применяться правило. Селектор по типу выбирают все элементы указанного типа, например, span {блок объявлений}.
Если один и тот же стиль нужно применить сразу к нескольким селекторам (необязательно селекторам по типу), селекторы должны перечисляться через запятую, например, span, div, p {блок объявлений}.


			2. Переменные CSS - настраиваемые свойства. 

Основные варианты использования CSS-переменных для того чтобы уменьшить и упостить размер кода. это значения,  которые объявляют в CSS:

 	a) это многократное использование таких значений
	б) это сокращение объема CSS кода
Например: при загрузке некоторых ресурсов из внешних источников можно хранить в переменных

	:root {
  	--main-bg: url("https://example.com/cool-image.jpg");
	}

	.section {
  	background: var(--main-bg);
	}
  Рассмотрим пример с использованием CSS переменных в вычислениях:
	.c-avatar {
 	 display: inline-block;
  	width: calc(var(--size, 1) * 30px);
  	height: calc(var(--size, 1) * 30px);
	}

	Размеры аватара зависят от значения переменной --size. Значением, используемым по умолчанию, является 1. Это значит, что стандартным размером аватара является 30px*30px.Изменение этой переменной приводит к изменению размера аватара.

.c-avatar--small {
  --size: 2;
}

.c-avatar--medium {
  --size: 3;
}

.c-avatar--large {
  --size: 4;
}

		3.Семантические HTML-теги и примеры их использования

Семантические  основные теги HTML, такие как <body>,<header>,<main>,<content> <footer> и <nav>

<a> </a> — ссылка,
<abbr> </abbr> — аббревиатура,
<address> </address> — адрес, информация об авторе, проекте,
<article> </article> — основной контент страницы, тег HTML5,
<aside> </aside> — боковая панель (сайдбар) сайта, тег HTML5,
<b> </b> — жирный шрифт,
<bgsound> — проигрывает музыку при открытии страницы, нестандартный тег,
<body> </body> — тело HTML-документа,
<br> — перевод строки,
<button> </button> — элемент формы, расширенная кнопка,
<caption> </caption> — заголовок таблицы,
<center> </center> — выравнивание элементов по центру,
<div> </div> — блочный элемент,
<figcaption> </figcaption> — заголовок тега figure, тег HTML5,
<figure> </figure> — группирует различные элементы, тег HTML5,
<footer> </footer> — подвал сайта, тег HTML5,
<form> </form> — форма,
<h*> </h*> — заголовки от h1 до h6,
<head> </head> — голова HTML-документа,
<header> </header> — шапка сайта, тег HTML5,
<hgroup> </hgroup> — группирует заголовки, тег HTML5,,
<html> </html> — HTML-документ,
<i> </i> — курсивный шрифт,
<img> — изображение (фотография, картинка, рисунок и т.д.),
<input> — элемент формы, может быть кнопкой, текстовым полем, переключателем и др.,
<li> </li> — элемент списка, находится между тегами ul и ol,
<link> — загружает внешние файлы .css, .xml, .ico,
<map> </map> — карта изображений,
<mark> </mark> — выделенный текст, тег HTML5,
<menu> </menu> — обрамляет теги command, тег HTML5,
<nav> </nav> — важные ссылки страницы, тег HTML5,
<ol> </ol> — нумерованный список,
<optgroup> </optgroup> — группирует теги option,
<option> </option> — элемент списка выбора, находится между тегами select, optgroup, datalist
<output> </output> — вывод работы скрипта, тег HTML5,
<p> </p> — абзац
<q> </q> — цитата,
<s> </s> — зачёркнутый текст,
<script> </script> — скрипт,
<section> </section> — семантически единые разделы страницы, тег HTML5,
<select> </select> — группирует теги option,
<source> — внедряет аудио/видео файлы, с помощью тегов audio и video, тег HTML5,
<spacer> </spacer> — пустое пространство, нестандартный тег,
<span> </span> — строчный элемент,
<strong> </strong> — жирный шрифт,
<style> </style> — внедряет CSS-код в страницу,
<sub> </sub> — нижний индекс,
<sup> </sup> — верхний индекс,
<table> </table> — таблица,
<tbody> </tbody> — тело таблицы,
<td> </td> — ячейка таблицы,
<textarea> </textarea> — элемент формы, многострочное поле ввода,
<tfoot> </tfoot> — подвал таблицы,
<th> </th> — ячейка таблицы, заголовочная
<thead> </thead> — голова таблицы,
<time> </time> — дата и/или время, тег HTML5,
<title> </title> — название страницы,
<tr> </tr> — строка таблицы,
<ul> </ul> — маркированный список,
<var> </var> — переменные языков программирования,
<video> </video> — воспроизводит видеофайлы, создаёт панель управления ими, тег HTML5.

				4.CSS-свойства position
	
	static	блок располагается в соответствии с нормальным потоком. Свойства top, right, bottom и left не применяются. Значение по умолчанию.
Относительно позиционированный блок сохраняет свои размеры, включая разрывы строк и пространство, первоначально зарезервированное для него.

Относительно позиционированный блок создает новый содержащий блок для абсолютно позиционированных потомков.

Влияние position: relative;  Слово relative в данном контексте означает - в зависимости от текущего СВОЕГО местоположения. Если задать элементу с таким свойством свойства top, left, right или bottom, то элемент будет сдвинут относительно того места, где он должен был бы находиться в обычном потоке. При этом элемент остается в потоке, другие элементы "видят" его на том месте, где он должен был бы находиться в обычном потоке. По сути элемент сдвигается, но соседние элементы этого не замечают.

	absolute положение блока (и, возможно, размер) задается с помощью свойств top, right, bottom и left. Эти свойства определяют явное смещение относительно его содержащего блока. Абсолютно позиционированные блоки полностью удаляется из нормального потока, не влияя на расположение сестринских элементов.
Отступы margin абсолютно позиционированных блоков не схлопываются.

Абсолютно позиционированный блок создает новый содержащий блок для дочерних элементов нормального потока и потомков с position: absolute;.

Содержимое абсолютно позиционированного элемента не может обтекать другие блоки. Абсолютно позиционированный блок могут скрывать содержимое другого блока (или сами могут быть скрыты), в зависимости от значения z-index перекрывающихся блоков.

	sticky	 создание эффектов пролистывания с использованием липкого позиционирования. Липкие элементы преимущественно используются для удерживания чего-либо, отображаемого на экране во время прокрутки.Положение блока рассчитывается в соответствии с нормальным потоком. Затем блок смещается относительно своего ближайшего предка с прокруткой или окна просмотра, если ни у одного из предков нет прокрутки.
«Липкий» блок может перекрывать другие блоки, а также создавать полосы прокрутки в случае переполнения.
«Липкий» блок сохраняет свои размеры, включая разрывы строк и пространство, первоначально зарезервированное для него.
«Липкий» блок создает новый содержащий блок для абсолютно и относительно позиционированных потомков.

	fixed  Данное свойство идентично поведению абсолютного позиционирования, с той разницей, что этот блок будет фиксироваться на экране в одном и том же месте. Если пользователь будет скролить страницу, блок все равно останется на месте.  Фиксированные блоки не перемещаются при прокрутке документа. В этом отношении они похожи на фиксированные фоновые изображения. При печати фиксированные блоки повторяются на каждой странице, содержащим блоком для них устанавливается область страницы. Блоки с фиксированным положением, которые больше области страницы, обрезаются.

	initial	Устанавливает значение свойства в значение по умолчанию.

	inherit	Наследует значение свойства от родительского элемента.












